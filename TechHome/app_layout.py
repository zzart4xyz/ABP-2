"""Support routines for layout composition."""
from __future__ import annotations

from TechHome.app_common import *

def _style_popup_label(self):
    self.popup_label.setStyleSheet(f"QLabel {{ background:qlineargradient(x1:0,y1:0,x2:1,y2:1, stop:0 {CLR_HEADER_BG}, stop:1 {CLR_HOVER}); border:2px solid {CLR_TITLE}; border-radius:5px; padding:8px 12px; color:{CLR_TEXT_IDLE}; font:600 14px '{FONT_FAM}'; }}")
    make_shadow(self.popup_label, 15, 4, 180)

def _build_ui(self, container):
    root = QHBoxLayout(container)
    root.setContentsMargins(0, 0, 0, 0)
    root.setSpacing(0)
    panel = QFrame()
    panel.setFixedWidth(PANEL_W)
    panel.setStyleSheet(f'background:{CLR_PANEL}; border-radius:{FRAME_RAD}px;')
    vp = QVBoxLayout(panel)
    vp.setContentsMargins(20, 16, 20, 16)
    vp.setSpacing(16)
    lbl_title = QLabel('TechHome')
    lbl_title.setStyleSheet(f"color:{CLR_TITLE}; font:700 32px '{FONT_FAM}';")
    vp.addWidget(lbl_title, alignment=Qt.AlignHCenter | Qt.AlignTop)
    menu_w = QWidget()
    menu_l = QVBoxLayout(menu_w)
    menu_l.setContentsMargins(0, 0, 0, 0)
    menu_l.setSpacing(16)
    self.buttons = []
    menu_items = [('Inicio', 'Home.svg'), ('Dispositivos', 'Devices.svg'), ('Más', 'More.svg'), ('Salud', 'Health.svg'), ('Configuración', 'Config.svg')]
    for i, (label, icn) in enumerate(menu_items):
        btn = QPushButton()
        btn.base_text = label
        btn.setText(f'   {label}')
        btn.setIcon(icon(icn))
        btn.setIconSize(QSize(24, 24))
        btn.setCheckable(True)
        btn.setAutoExclusive(True)
        btn.setCursor(Qt.PointingHandCursor)
        btn.setMinimumHeight(38)
        btn.setStyleSheet(f"\n                QPushButton {{ color:{CLR_TEXT_IDLE}; background:transparent;\n                  border:none; padding:8px 16px; border-radius:5px;\n                  font:700 18px '{FONT_FAM}'; text-align:left; }}\n                QPushButton:checked {{ background:{CLR_ITEM_ACT}; color:{CLR_TITLE}; }}\n            ")
        btn.clicked.connect(lambda _, ix=i: self._switch_page(self.stack, ix))
        menu_l.addWidget(btn)
        self.buttons.append(btn)
    menu_l.addStretch(1)
    scroll = QScrollArea()
    scroll.setWidget(menu_w)
    scroll.setWidgetResizable(True)
    scroll.setFrameShape(QFrame.NoFrame)
    vp.addWidget(scroll, 1)
    ver_lbl = QLabel('Versión 1.0')
    ver_lbl.setStyleSheet(f"color:{CLR_TITLE}; font:700 18px '{FONT_FAM}';")
    vp.addWidget(ver_lbl, alignment=Qt.AlignHCenter | Qt.AlignBottom)
    self.stack = QStackedWidget()
    self.stack.addWidget(self._make_home_page())
    self.stack.addWidget(self._make_devices_page())
    self.stack.addWidget(self._make_more_page())
    self.stack.addWidget(self._make_health_page())
    self.stack.addWidget(self._make_config_page())
    self.buttons[0].setChecked(True)
    self.stack.setCurrentIndex(0)
    right = QWidget()
    vr = QVBoxLayout(right)
    vr.setContentsMargins(30, 0, 30, 20)
    vr.setSpacing(10)
    vr.addWidget(self.stack)
    vr.addStretch(1)
    root.addWidget(panel, 1)
    root.addWidget(right, 4)

def _make_home_page(self):
    w = QWidget()
    grid = QGridLayout(w)
    grid.setContentsMargins(0, 20, 0, 0)
    grid.setHorizontalSpacing(20)
    grid.setVerticalSpacing(20)
    grid.setColumnStretch(0, 1)
    grid.setColumnStretch(1, 1)
    greet = QFrame()
    greet.setFixedHeight(80)
    greet.setStyleSheet(f'background:{CLR_PANEL}; border-bottom-left-radius:5px; border-bottom-right-radius:5px;')
    hl = QHBoxLayout(greet)
    hl.setContentsMargins(16, 0, 16, 0)
    user_display = self.username if self.username else 'Usuario'
    lg = QLabel(f'¡Hola, {user_display}!')
    lg.setStyleSheet(f"color:{CLR_TEXT_IDLE}; font:600 18px '{FONT_FAM}';")
    hl.addWidget(lg)
    hl.addStretch(1)
    tim = QLabel(self.current_time())
    tim.setStyleSheet(f"color:{CLR_TEXT_IDLE}; font:600 18px '{FONT_FAM}';")
    tim.setAlignment(Qt.AlignRight | Qt.AlignVCenter)
    hl.addWidget(tim)
    self.home_time_label = tim
    QTimer(tim, timeout=lambda: tim.setText(self.current_time())).start(1000)
    grid.addWidget(greet, 0, 0, 1, 2)
    notif_header = QFrame()
    notif_header.setStyleSheet(f'background:{CLR_PANEL}; padding:8px 12px; border-top-left-radius:5px; border-top-right-radius:5px;')
    notif_layout = QHBoxLayout(notif_header)
    notif_layout.setContentsMargins(0, 0, 0, 0)
    notif_layout.setSpacing(8)
    notif_title = QLabel('Notificaciones', notif_header)
    notif_title.setStyleSheet(f"color:{CLR_TITLE}; font:700 20px '{FONT_FAM}';")
    try:
        from PyQt5.QtWidgets import QSizePolicy
        notif_title.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
    except Exception:
        pass
    notif_layout.addWidget(notif_title)
    notif_layout.addStretch(1)
    notif_info_btn = QPushButton(notif_header)
    notif_info_btn.setCursor(Qt.PointingHandCursor)
    notif_info_btn.setFlat(True)
    try:
        pix = load_icon_pixmap('circle-info.svg', QSize(40, 40))
        pix = tint_pixmap(pix, QColor(CLR_TITLE))
        notif_info_btn.setIcon(QIcon(pix))
    except Exception:
        fallback_pix = load_icon_pixmap('circle-info.svg', QSize(40, 40))
        notif_info_btn.setIcon(QIcon(fallback_pix))
    notif_info_btn.setIconSize(QSize(40, 40))
    notif_info_btn.setStyleSheet('border:none; padding:0;')
    notif_info_btn.clicked.connect(self._open_notifications_details)
    notif_layout.addWidget(notif_info_btn, alignment=Qt.AlignRight | Qt.AlignVCenter)
    grid.addWidget(notif_header, 1, 0)
    nc = QFrame()
    nc.setStyleSheet(f'background:{CLR_BG}; border:none; border-radius:5px;')
    nc.setMinimumSize(300, 300)
    nv = QVBoxLayout(nc)
    nv.setContentsMargins(0, 0, 0, 0)
    nv.setSpacing(0)
    self.home_notif_rows: list[tuple[QLabel, QLabel]] = []
    notif_inner = QFrame()
    notif_inner.setStyleSheet('background:transparent;')
    ni_l = QVBoxLayout(notif_inner)
    ni_l.setContentsMargins(8, 8, 8, 8)
    ni_l.setSpacing(8)
    for _ in range(HOME_RECENT_COUNT):
        row_frame = QFrame(notif_inner)
        row_frame.setStyleSheet(f'background:{CLR_SURFACE}; border:none; border-radius:8px;')
        row_layout = QHBoxLayout(row_frame)
        row_layout.setContentsMargins(8, 4, 8, 4)
        row_layout.setSpacing(8)
        icon_lbl = QLabel(row_frame)
        icon_lbl.setFixedSize(35, 35)
        icon_lbl.setScaledContents(True)
        icon_lbl.setStyleSheet('border:none;')
        text_lbl = QLabel('--', row_frame)
        text_lbl.setStyleSheet(f"color:{CLR_TITLE}; font:600 16px '{FONT_FAM}'; border:none;")
        text_lbl.setAlignment(Qt.AlignCenter)
        row_layout.addWidget(icon_lbl)
        row_layout.addWidget(text_lbl, 1)
        self.home_notif_rows.append((icon_lbl, text_lbl))
        ni_l.addWidget(row_frame)
    nv.addWidget(notif_inner)
    grid.addWidget(nc, 2, 0, 2, 1)
    metrics_header = QFrame()
    metrics_header.setStyleSheet(f'background:{CLR_PANEL}; padding:8px 12px; border-top-left-radius:5px; border-top-right-radius:5px;')
    header_layout = QHBoxLayout(metrics_header)
    header_layout.setContentsMargins(0, 0, 0, 0)
    header_layout.setSpacing(8)
    m_title = QLabel('Resumen de Métricas', metrics_header)
    m_title.setStyleSheet(f"color:{CLR_TITLE}; font:700 20px '{FONT_FAM}';")
    try:
        from PyQt5.QtWidgets import QSizePolicy
        m_title.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
    except Exception:
        pass
    header_layout.addWidget(m_title)
    header_layout.addStretch(1)
    info_btn = QPushButton(metrics_header)
    info_btn.setCursor(Qt.PointingHandCursor)
    info_btn.setFlat(True)
    try:
        pix = load_icon_pixmap('circle-info.svg', QSize(40, 40))
        pix = tint_pixmap(pix, QColor(CLR_TITLE))
        info_btn.setIcon(QIcon(pix))
    except Exception:
        fallback_pix = load_icon_pixmap('circle-info.svg', QSize(40, 40))
        info_btn.setIcon(QIcon(fallback_pix))
    info_btn.setIconSize(QSize(40, 40))
    info_btn.clicked.connect(self._open_metrics_details)
    info_btn.setStyleSheet('border:none; padding:0;')
    header_layout.addWidget(info_btn, alignment=Qt.AlignRight | Qt.AlignVCenter)
    grid.addWidget(metrics_header, 1, 1)
    sumf = QFrame()
    sumf.setStyleSheet(f'background:{CLR_PANEL}; border-bottom-left-radius:5px; border-bottom-right-radius:5px;')
    gs = QGridLayout(sumf)
    gs.setContentsMargins(16, 16, 16, 16)
    gs.setHorizontalSpacing(16)
    gs.setVerticalSpacing(16)
    gauge_specs = [('devices', 'mobile.svg'), ('temp', 'temperature-high.svg'), ('energy', 'bolt.svg'), ('water', 'droplet.svg')]
    self.home_metric_gauges = {}
    for i, (key, icon_name) in enumerate(gauge_specs):
        r, cidx = divmod(i, 2)
        g_container = QWidget()
        vlay = QVBoxLayout(g_container)
        vlay.setContentsMargins(0, 0, 0, 0)
        vlay.setSpacing(4)
        gauge = MetricGauge(icon_name)
        gauge.setToolTip(key)
        vlay.addWidget(gauge, alignment=Qt.AlignCenter)
        vlay.addStretch(1)
        gs.addWidget(g_container, r, cidx, alignment=Qt.AlignCenter)
        self.home_metric_gauges[key] = gauge
    grid.addWidget(sumf, 2, 1, 2, 1)
    l4 = QLabel('Accesos Rápidos')
    l4.setStyleSheet(f"background:{CLR_PANEL}; color:{CLR_TITLE}; font:700 20px '{FONT_FAM}'; padding:6px 12px; border-top-left-radius:5px; border-top-right-radius:5px;")
    grid.addWidget(l4, 4, 0, 1, 2)
    h_notif = l4.sizeHint().height()
    h_metrics = metrics_header.sizeHint().height()
    h_notifications = notif_header.sizeHint().height()
    header_height = max(h_notif, h_metrics, h_notifications)
    notif_header.setFixedHeight(header_height)
    metrics_header.setFixedHeight(header_height)
    cf = QFrame()
    cf.setStyleSheet(f'background:{CLR_PANEL}; border-bottom-left-radius:5px; border-bottom-right-radius:5px;')
    hh = QHBoxLayout(cf)
    hh.setContentsMargins(16, 16, 16, 16)
    hh.setSpacing(16)
    acts = [('Historial De Salud', 'files-medical.svg', 'Historial De Salud'), ('Cámaras', 'camera-cctv.svg', 'Cámaras'), ('Notificaciones', 'bell-on.svg', 'Notificaciones'), ('Cuenta', 'user.svg', 'Cuenta')]
    hh.addStretch(1)
    for n, icn, page in acts:
        b = QuickAccessButton(n, icn)
        b.clicked.connect(lambda p=page: self._open_more_section(p, True))
        hh.addWidget(b)
    hh.addStretch(1)
    grid.addWidget(cf, 5, 0, 1, 2)
    return w

def _make_more_page(self):
    w = QWidget()
    layout = QVBoxLayout(w)
    layout.setContentsMargins(0, 0, 0, 0)
    layout.setSpacing(0)
    self.more_stack = QStackedWidget()
    gp = QWidget()
    g = QGridLayout(gp)
    g.setContentsMargins(16, 16, 16, 16)
    g.setHorizontalSpacing(24)
    g.setVerticalSpacing(24)
    items = ['Listas Y Notas', 'Recordatorios', 'Alarmas Y Timers', 'Calendario', 'Notificaciones', 'Cámaras', 'Historial De Salud', 'Información']
    page_map = {text: i + 1 for i, text in enumerate(items)}
    self.more_pages = page_map
    icon_map = {'Listas Y Notas': 'clipboard-list.svg', 'Recordatorios': 'bell.svg', 'Alarmas Y Timers': 'alarm-clock.svg', 'Calendario': 'calendar-days.svg', 'Notificaciones': 'bell-on.svg', 'Cámaras': 'camera-cctv.svg', 'Historial De Salud': 'files-medical.svg', 'Información': 'info.svg'}
    for idx, text in enumerate(items):
        icon_name = icon_map.get(text, None)
        ccard = CardButton(text, icon_name)
        if text == 'Notificaciones':
            ccard.clicked.connect(lambda ix=page_map[text], s=self: (setattr(s, 'from_home_more', False), s._populate_notif_table(), s._switch_page(s.more_stack, ix)))
        elif text == 'Historial De Salud':
            ccard.clicked.connect(lambda ix=page_map[text], s=self: (setattr(s, 'from_home_more', False), s._populate_health_table(), s._switch_page(s.more_stack, ix)))
        else:
            ccard.clicked.connect(lambda ix=page_map[text], s=self: (setattr(s, 'from_home_more', False), s._switch_page(s.more_stack, ix)))
        r, cidx = divmod(idx, 2)
        g.addWidget(ccard, r, cidx)
    g.setRowStretch(4, 1)
    self.more_stack.addWidget(gp)
    ln = QWidget()
    ln_layout = QVBoxLayout(ln)
    ln_layout.setContentsMargins(16, 16, 16, 16)
    ln_layout.setSpacing(8)
    back = QPushButton()
    back.setIcon(icon('Arrow.svg'))
    back.setIconSize(QSize(24, 24))
    back.setFixedSize(40, 40)
    back.setStyleSheet('background:transparent; border:none;')
    back.clicked.connect(self._back_from_more)
    ln_layout.addWidget(back, alignment=Qt.AlignLeft)
    title_ln = QLabel('Listas Y Notas')
    title_ln.setStyleSheet(f"color:{CLR_TITLE}; font:700 22px '{FONT_FAM}';")
    ln_layout.addWidget(title_ln)
    tab = QTabWidget()
    tab.setStyleSheet(f"\n            QTabBar::tab {{\n                background:{CLR_PANEL};\n                color:{CLR_TEXT_IDLE};\n                padding:8px 16px;\n                border:2px solid {CLR_TITLE};\n                border-bottom:none;\n                border-top-left-radius:5px;\n                border-top-right-radius:5px;\n                font:600 16px '{FONT_FAM}';\n            }}\n            QTabBar::tab:selected {{\n                background:{CLR_ITEM_ACT};\n                color:{CLR_TITLE};\n            }}\n            QTabBar::tab:!selected {{\n                background:{CLR_PANEL};\n                color:{CLR_TEXT_IDLE};\n            }}\n            QTabWidget::pane {{ border:none; }}\n        ")
    tab.setTabPosition(QTabWidget.North)
    tab.tabBar().setDocumentMode(True)
    tab.tabBar().setStyleSheet('QTabBar::tab { min-width: 120px; margin:4px; padding:8px 20px; }')
    lists_tab = QWidget()
    lists_l = QHBoxLayout(lists_tab)
    lists_l.setContentsMargins(0, 0, 0, 0)
    lists_l.setSpacing(16)
    left_frame = QFrame()
    left_frame.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
    lf_layout = QVBoxLayout(left_frame)
    lf_layout.setContentsMargins(8, 8, 8, 8)
    lf_layout.setSpacing(8)
    self.create_list_btn = QPushButton('Crear Lista')
    self.create_list_btn.setFixedHeight(36)
    self.create_list_btn.setStyleSheet(f"background:{CLR_TITLE}; color:#07101B; font:600 14px '{FONT_FAM}'; border:none; border-radius:5px;")
    self.create_list_btn.clicked.connect(self._on_add_list)
    lf_layout.addWidget(self.create_list_btn)
    self.lists_widget = QListWidget()
    self.lists_widget.setItemDelegate(NoFocusDelegate(self.lists_widget))
    self.lists_widget.setStyleSheet(f"\n            QListWidget {{ background:transparent; border:none; color:{CLR_TEXT_IDLE}; font:500 16px '{FONT_FAM}'; }}\n            QListWidget::item {{ outline:none; }}\n            QListWidget::item:selected {{ background:{CLR_ITEM_ACT}; color:{CLR_TITLE}; border-radius:5px; }}\n        ")
    lf_layout.addWidget(self.lists_widget)
    lists_l.addWidget(left_frame, 1)
    detail_frame = QFrame()
    detail_frame.setStyleSheet(f'background:{CLR_PANEL}; border-radius:5px;')
    df_layout = QVBoxLayout(detail_frame)
    df_layout.setContentsMargins(8, 8, 8, 8)
    df_layout.setSpacing(8)
    self.list_title = QLabel('')
    self.list_title.setStyleSheet(f"color:{CLR_TEXT_IDLE}; font:600 20px '{FONT_FAM}';")
    df_layout.addWidget(self.list_title, alignment=Qt.AlignLeft)
    self.add_item_btn = QPushButton('Añadir Elemento')
    self.add_item_btn.setFixedHeight(36)
    self.add_item_btn.setStyleSheet(f"background:{CLR_TITLE}; color:#07101B; font:600 14px '{FONT_FAM}'; border:none; border-radius:5px;")
    df_layout.addWidget(self.add_item_btn, alignment=Qt.AlignLeft)
    self.list_items_widget = QListWidget()
    self.list_items_widget.setItemDelegate(NoFocusDelegate(self.list_items_widget))
    self.list_items_widget.setStyleSheet(f"\n            QListWidget {{ background:transparent; border:none; color:{CLR_TEXT_IDLE}; font:500 16px '{FONT_FAM}'; }}\n            QListWidget::item {{ outline:none; }}\n            QListWidget::item:selected {{ background:{CLR_ITEM_ACT}; color:{CLR_TITLE}; border-radius:5px; }}\n        ")
    items_scroll = QScrollArea()
    items_scroll.setWidgetResizable(True)
    items_scroll.setWidget(self.list_items_widget)
    items_scroll.setFrameShape(QFrame.NoFrame)
    items_scroll.setVerticalScrollBar(CustomScrollBar(Qt.Vertical))
    df_layout.addWidget(items_scroll, 1)
    lists_l.addWidget(detail_frame, 2)
    tab.addTab(lists_tab, 'Listas')
    self.lists_widget.currentTextChanged.connect(self._on_list_selected)
    self.add_item_btn.clicked.connect(self._on_add_list_item)
    notes_tab = QWidget()
    notes_l = QVBoxLayout(notes_tab)
    notes_l.setContentsMargins(0, 0, 0, 0)
    notes_l.setSpacing(8)
    add_note = QPushButton('Agregar nota')
    add_note.setIcon(icon('More.svg'))
    add_note.setIconSize(QSize(24, 24))
    add_note.setFixedHeight(40)
    add_note.setStyleSheet(f"color:{CLR_TITLE}; font:600 16px '{FONT_FAM}'; background:transparent; border:none;")
    notes_l.addWidget(add_note, alignment=Qt.AlignLeft)
    frame_notes = QFrame()
    frame_notes.setStyleSheet(f'QFrame {{ border: 2px solid {CLR_TITLE}; border-radius:5px; background:{CLR_SURFACE}; }}')
    vcn = QVBoxLayout(frame_notes)
    vcn.setContentsMargins(4, 4, 4, 4)
    notes_scroll = QScrollArea()
    notes_scroll.setWidgetResizable(True)
    notes_container = QWidget()
    notes_container.setStyleSheet(f'background:{CLR_SURFACE};')
    notes_scroll.setWidget(notes_container)
    notes_scroll.setFrameShape(QFrame.NoFrame)
    notes_scroll.setVerticalScrollBar(CustomScrollBar(Qt.Vertical))
    notes_scroll.setStyleSheet(f'background:{CLR_SURFACE}; border:none;')
    notes_scroll.viewport().setStyleSheet(f'background:{CLR_SURFACE};')
    vcn.addWidget(notes_scroll)
    self.notes_grid = QGridLayout(notes_container)
    self.notes_grid.setSpacing(16)
    spacing = self.notes_grid.spacing()
    self.notes_manager = NotesManager(notes_container, cell_size=(200, 150), spacing=spacing, rows=3, columns=3)
    self.notes_items = []
    notes_l.addWidget(frame_notes)
    add_note.clicked.connect(self._add_note)
    tab.addTab(notes_tab, 'Notas')
    ln_layout.addWidget(tab)
    self.more_stack.addWidget(ln)
    rec_page = QFrame()
    rec_page.setStyleSheet(f'background:{CLR_BG}; border-radius:5px;')
    rp_layout = QVBoxLayout(rec_page)
    rp_layout.setContentsMargins(16, 16, 16, 16)
    rp_layout.setSpacing(12)
    back_rec = QPushButton()
    back_rec.setIcon(icon('Arrow.svg'))
    back_rec.setIconSize(QSize(24, 24))
    back_rec.setFixedSize(36, 36)
    back_rec.setStyleSheet('background:transparent; border:none;')
    back_rec.clicked.connect(self._back_from_more)
    rp_layout.addWidget(back_rec, alignment=Qt.AlignLeft)
    title_rec = QLabel('Recordatorios')
    title_rec.setStyleSheet(f"color:{CLR_TITLE}; font:700 22px '{FONT_FAM}';")
    rp_layout.addWidget(title_rec)
    input_frame = QFrame()
    input_frame.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
    ih = QHBoxLayout(input_frame)
    ih.setContentsMargins(8, 8, 8, 8)
    ih.setSpacing(8)
    self.input_record_text = QLineEdit()
    self.input_record_text.setPlaceholderText('Texto Del Recordatorio')
    self.input_record_text.setStyleSheet(input_style(bg=CLR_SURFACE))
    self.input_record_datetime = QDateTimeEdit(datetime.now())
    self.input_record_datetime.setDisplayFormat('yyyy-MM-dd HH:mm')
    self.input_record_datetime.setStyleSheet(input_style('QDateTimeEdit', CLR_SURFACE))
    self.input_record_datetime.setButtonSymbols(QAbstractSpinBox.NoButtons)
    btn_add_rec = QPushButton(' Añadir')
    btn_add_rec.setIcon(icon('More.svg'))
    btn_add_rec.setIconSize(QSize(16, 16))
    btn_add_rec.setFixedSize(120, 32)
    btn_add_rec.setCursor(Qt.PointingHandCursor)
    btn_add_rec.setStyleSheet(button_style())
    btn_add_rec.clicked.connect(self._add_recordatorio)
    ih.addWidget(self.input_record_text, 2)
    ih.addWidget(self.input_record_datetime, 1)
    ih.addWidget(btn_add_rec)
    rp_layout.addWidget(input_frame)
    table_frame = QFrame()
    table_frame.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
    table_layout = QVBoxLayout(table_frame)
    table_layout.setContentsMargins(8, 8, 8, 8)
    table_layout.setSpacing(8)
    self.table_recordatorios = QTableWidget()
    self.table_recordatorios.setColumnCount(2)
    self.table_recordatorios.setHorizontalHeaderLabels(['Fecha Y Hora', 'Mensaje'])
    hdr = self.table_recordatorios.horizontalHeader()
    hdr.setStyleSheet(f"QHeaderView::section {{ background:{CLR_HEADER_BG}; color:{CLR_HEADER_TEXT}; padding:8px; font:600 14px '{FONT_FAM}'; border:none; }}")
    hdr.setDefaultAlignment(Qt.AlignCenter)
    self.table_recordatorios.verticalHeader().setVisible(False)
    self.table_recordatorios.setEditTriggers(QTableWidget.NoEditTriggers)
    style_table(self.table_recordatorios)
    self.table_recordatorios.setColumnWidth(0, 160)
    make_shadow(table_frame, 12, 4, 120)
    table_layout.addWidget(self.table_recordatorios)
    rp_layout.addWidget(table_frame, 1)
    btn_del_rec = QPushButton('Eliminar Seleccionado')
    btn_del_rec.setIcon(icon('Trash.svg'))
    btn_del_rec.setIconSize(QSize(16, 16))
    btn_del_rec.setFixedSize(180, 32)
    btn_del_rec.setCursor(Qt.PointingHandCursor)
    btn_del_rec.setStyleSheet(button_style(CLR_TITLE, '4px 8px'))
    btn_del_rec.clicked.connect(self._delete_selected_recordatorio)
    rp_layout.addWidget(btn_del_rec, alignment=Qt.AlignRight)
    self.more_stack.addWidget(rec_page)
    alarm_page = QFrame()
    alarm_page.setStyleSheet(f'background:{CLR_BG}; border-radius:5px;')
    ap_layout = QVBoxLayout(alarm_page)
    ap_layout.setContentsMargins(16, 16, 16, 16)
    ap_layout.setSpacing(12)
    back_alarm = QPushButton()
    back_alarm.setIcon(icon('Arrow.svg'))
    back_alarm.setIconSize(QSize(24, 24))
    back_alarm.setFixedSize(36, 36)
    back_alarm.setStyleSheet('background:transparent; border:none;')
    back_alarm.clicked.connect(self._back_from_more)
    ap_layout.addWidget(back_alarm, alignment=Qt.AlignLeft)
    title_alarm = QLabel('Alarmas Y Timers')
    title_alarm.setStyleSheet(f"color:{CLR_TITLE}; font:700 22px '{FONT_FAM}';")
    ap_layout.addWidget(title_alarm)
    tab_at = QTabWidget()
    tab_at.setStyleSheet(f"\n            QTabBar::tab {{\n                background:{CLR_PANEL};\n                color:{CLR_TEXT_IDLE};\n                padding:8px 16px;\n                border:2px solid {CLR_TITLE};\n                border-bottom:none;\n                border-top-left-radius:5px;\n                border-top-right-radius:5px;\n                font:600 16px '{FONT_FAM}';\n            }}\n            QTabBar::tab:selected {{\n                background:{CLR_ITEM_ACT};\n                color:{CLR_TITLE};\n            }}\n            QTabBar::tab:!selected {{\n                background:{CLR_PANEL};\n                color:{CLR_TEXT_IDLE};\n            }}\n            QTabWidget::pane {{ border:none; }}\n        ")
    tab_at.setTabPosition(QTabWidget.North)
    tab_at.tabBar().setDocumentMode(True)
    tab_at.tabBar().setStyleSheet('QTabBar::tab { min-width: 120px; margin:4px; padding:8px 20px; }')
    alarm_tab = QWidget()
    at_l = QVBoxLayout(alarm_tab)
    at_l.setContentsMargins(0, 0, 0, 0)
    at_l.setSpacing(8)
    input_frame_alarm = QFrame()
    input_frame_alarm.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
    a_layout = QHBoxLayout(input_frame_alarm)
    a_layout.setContentsMargins(8, 8, 8, 8)
    a_layout.setSpacing(8)
    self.input_alarm_text = QLineEdit()
    self.input_alarm_text.setPlaceholderText('Etiqueta De Alarma')
    self.input_alarm_text.setStyleSheet(input_style(bg=CLR_SURFACE))
    self.input_alarm_datetime = QDateTimeEdit(datetime.now())
    self.input_alarm_datetime.setDisplayFormat('yyyy-MM-dd HH:mm')
    self.input_alarm_datetime.setStyleSheet(input_style('QDateTimeEdit', CLR_SURFACE))
    self.input_alarm_datetime.setButtonSymbols(QAbstractSpinBox.NoButtons)
    btn_add_alarm = QPushButton(' Añadir')
    btn_add_alarm.setIcon(icon('More.svg'))
    btn_add_alarm.setIconSize(QSize(16, 16))
    btn_add_alarm.setFixedSize(120, 32)
    btn_add_alarm.setCursor(Qt.PointingHandCursor)
    btn_add_alarm.setStyleSheet(button_style())
    btn_add_alarm.clicked.connect(self._add_alarm)
    a_layout.addWidget(self.input_alarm_text, 2)
    a_layout.addWidget(self.input_alarm_datetime, 1)
    a_layout.addWidget(btn_add_alarm)
    at_l.addWidget(input_frame_alarm)
    tbl_alarm = QFrame()
    tbl_alarm.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
    tbl_al_layout = QVBoxLayout(tbl_alarm)
    tbl_al_layout.setContentsMargins(8, 8, 8, 8)
    tbl_al_layout.setSpacing(8)
    self.table_alarms = QTableWidget()
    self.table_alarms.setColumnCount(2)
    self.table_alarms.setHorizontalHeaderLabels(['Fecha Y Hora', 'Etiqueta'])
    hdra = self.table_alarms.horizontalHeader()
    hdra.setStyleSheet(f"QHeaderView::section {{ background:{CLR_HEADER_BG}; color:{CLR_HEADER_TEXT}; padding:8px; font:600 14px '{FONT_FAM}'; border:none; }}")
    hdra.setDefaultAlignment(Qt.AlignCenter)
    self.table_alarms.verticalHeader().setVisible(False)
    self.table_alarms.setEditTriggers(QTableWidget.NoEditTriggers)
    style_table(self.table_alarms)
    self.table_alarms.setColumnWidth(0, 160)
    make_shadow(tbl_alarm, 12, 4, 120)
    tbl_al_layout.addWidget(self.table_alarms)
    at_l.addWidget(tbl_alarm, 1)
    btn_del_alarm = QPushButton('Eliminar Seleccionado')
    btn_del_alarm.setIcon(icon('Trash.svg'))
    btn_del_alarm.setIconSize(QSize(16, 16))
    btn_del_alarm.setFixedSize(180, 32)
    btn_del_alarm.setCursor(Qt.PointingHandCursor)
    btn_del_alarm.setStyleSheet(button_style(CLR_TITLE, '4px 8px'))
    btn_del_alarm.clicked.connect(self._delete_selected_alarm)
    at_l.addWidget(btn_del_alarm, alignment=Qt.AlignRight)
    tab_at.addTab(alarm_tab, 'Alarmas')
    timer_tab = QWidget()
    ti_l = QVBoxLayout(timer_tab)
    ti_l.setContentsMargins(0, 0, 0, 0)
    ti_l.setSpacing(8)
    input_frame_timer = QFrame()
    input_frame_timer.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
    t_layout = QHBoxLayout(input_frame_timer)
    t_layout.setContentsMargins(8, 8, 8, 8)
    t_layout.setSpacing(8)
    self.input_timer_text = QLineEdit()
    self.input_timer_text.setPlaceholderText('Etiqueta Del Timer')
    self.input_timer_text.setStyleSheet(input_style(bg=CLR_SURFACE))
    self.input_timer_seconds = QSpinBox()
    self.input_timer_seconds.setRange(0, 86400)
    self.input_timer_seconds.setSuffix(' s')
    self.input_timer_seconds.setStyleSheet(input_style('QSpinBox', CLR_SURFACE))
    self.input_timer_seconds.setButtonSymbols(QAbstractSpinBox.NoButtons)
    btn_add_timer = QPushButton(' Añadir')
    btn_add_timer.setIcon(icon('More.svg'))
    btn_add_timer.setIconSize(QSize(16, 16))
    btn_add_timer.setFixedSize(120, 32)
    btn_add_timer.setCursor(Qt.PointingHandCursor)
    btn_add_timer.setStyleSheet(button_style())
    btn_add_timer.clicked.connect(self._add_timer)
    t_layout.addWidget(self.input_timer_text, 2)
    t_layout.addWidget(self.input_timer_seconds, 1)
    t_layout.addWidget(btn_add_timer)
    ti_l.addWidget(input_frame_timer)
    tbl_timer = QFrame()
    tbl_timer.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
    tbl_ti_layout = QVBoxLayout(tbl_timer)
    tbl_ti_layout.setContentsMargins(8, 8, 8, 8)
    tbl_ti_layout.setSpacing(8)
    self.table_timers = QTableWidget()
    self.table_timers.setColumnCount(2)
    self.table_timers.setHorizontalHeaderLabels(['Etiqueta', 'Restante'])
    hdrt = self.table_timers.horizontalHeader()
    hdrt.setStyleSheet(f"QHeaderView::section {{ background:{CLR_HEADER_BG}; color:{CLR_HEADER_TEXT}; padding:8px; font:600 14px '{FONT_FAM}'; border:none; }}")
    hdrt.setDefaultAlignment(Qt.AlignCenter)
    self.table_timers.verticalHeader().setVisible(False)
    self.table_timers.setEditTriggers(QTableWidget.NoEditTriggers)
    style_table(self.table_timers)
    self.table_timers.setColumnWidth(1, 120)
    make_shadow(tbl_timer, 12, 4, 120)
    tbl_ti_layout.addWidget(self.table_timers)
    ti_l.addWidget(tbl_timer, 1)
    btn_del_timer = QPushButton('Eliminar Seleccionado')
    btn_del_timer.setIcon(icon('Trash.svg'))
    btn_del_timer.setIconSize(QSize(16, 16))
    btn_del_timer.setFixedSize(180, 32)
    btn_del_timer.setCursor(Qt.PointingHandCursor)
    btn_del_timer.setStyleSheet(button_style(CLR_TITLE, '4px 8px'))
    btn_del_timer.clicked.connect(self._delete_selected_timer)
    ti_l.addWidget(btn_del_timer, alignment=Qt.AlignRight)
    tab_at.addTab(timer_tab, 'Timers')
    ap_layout.addWidget(tab_at, 1)
    self.more_stack.addWidget(alarm_page)
    calendar_page = QFrame()
    calendar_page.setStyleSheet(f'background:{CLR_BG}; border-radius:5px;')
    cp_layout = QVBoxLayout(calendar_page)
    cp_layout.setContentsMargins(16, 16, 16, 16)
    cp_layout.setSpacing(8)
    back_cal = QPushButton()
    back_cal.setIcon(icon('Arrow.svg'))
    back_cal.setIconSize(QSize(24, 24))
    back_cal.setFixedSize(36, 36)
    back_cal.setStyleSheet('background:transparent; border:none;')
    back_cal.clicked.connect(self._back_from_more)
    cp_layout.addWidget(back_cal, alignment=Qt.AlignLeft)
    title_cal = QLabel('Calendario')
    title_cal.setStyleSheet(f"color:{CLR_TITLE}; font:700 22px '{FONT_FAM}';")
    cp_layout.addWidget(title_cal)
    cal = CurrentMonthCalendar()
    cal.setGridVisible(True)
    cal.setVerticalHeaderFormat(QCalendarWidget.NoVerticalHeader)
    cal_style = f"\n            QCalendarWidget {{\n                background:{CLR_PANEL};\n                color:{CLR_TEXT_IDLE};\n                border:2px solid {CLR_TITLE};\n                border-radius:5px;\n            }}\n            QCalendarWidget QWidget {{\n                background:{CLR_PANEL};\n                color:{CLR_TEXT_IDLE};\n            }}\n            QCalendarWidget QWidget#qt_calendar_calendarview {{\n                background:{CLR_BG};\n                alternate-background-color:{CLR_BG};\n                border:none;\n                margin:0;\n            }}\n            QCalendarWidget QWidget#qt_calendar_navigationbar {{\n                background:{CLR_PANEL};\n                border:none;\n                padding:0;\n                margin-bottom:8px;\n            }}\n            QCalendarWidget QToolButton::menu-indicator {{ image:none; }}\n            QCalendarWidget QAbstractItemView {{\n                background:{CLR_BG};\n                color:{CLR_TEXT_IDLE};\n                selection-background-color:{CLR_ITEM_ACT};\n                selection-color:{CLR_TITLE};\n                gridline-color:{CLR_TITLE};\n                outline:none;\n                font:600 16px '{FONT_FAM}';\n            }}\n            QCalendarWidget QHeaderView::section {{\n                background:{CLR_HEADER_BG};\n                color:{CLR_HEADER_TEXT};\n                border:none;\n                font:600 18px '{FONT_FAM}';\n            }}\n            QCalendarWidget::item {{\n                background:{CLR_BG};\n                color:{CLR_TEXT_IDLE};\n                padding:4px;\n                font:600 16px '{FONT_FAM}';\n            }}\n            QCalendarWidget::item:selected {{\n                background:{CLR_ITEM_ACT};\n                color:{CLR_TITLE};\n            }}\n            QCalendarWidget::item:enabled:hover {{\n                background:{CLR_HEADER_BG};\n                color:{CLR_TITLE};\n            }}\n        "
    cal.setStyleSheet(cal_style)
    cal.setStyleSheet(cal.styleSheet() + 'QCalendarWidget QWidget:focus{outline:none;}')
    cal.setStyleSheet(cal.styleSheet() + f'\n            /* Cabeceras de días de la semana y números de semana */\n            QCalendarWidget QTableView QHeaderView::section {{\n                background: {CLR_HEADER_BG};\n                color:      {CLR_HEADER_TEXT};\n                border: none;\n            }}\n        ')
    cal.selectionChanged.connect(self._on_calendar_date_selected)
    cal_frame = QFrame()
    cal_frame.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
    cf_layout = QVBoxLayout(cal_frame)
    cf_layout.setContentsMargins(4, 4, 4, 4)
    cf_layout.addWidget(cal)
    cal_frame.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
    cp_layout.addWidget(cal_frame, 1)
    self.calendar_widget = cal
    self._refresh_calendar_events()
    self.more_stack.addWidget(calendar_page)
    notif_page = QFrame()
    notif_page.setStyleSheet(f'background:{CLR_BG}; border-radius:5px;')
    np_layout = QVBoxLayout(notif_page)
    np_layout.setContentsMargins(16, 16, 16, 16)
    np_layout.setSpacing(12)
    back_not = QPushButton()
    back_not.setIcon(icon('Arrow.svg'))
    back_not.setIconSize(QSize(24, 24))
    back_not.setFixedSize(36, 36)
    back_not.setStyleSheet('background:transparent; border:none;')
    back_not.clicked.connect(self._back_from_more)
    np_layout.addWidget(back_not, alignment=Qt.AlignLeft)
    title_not = QLabel('Notificaciones')
    title_not.setStyleSheet(f"color:{CLR_TITLE}; font:700 22px '{FONT_FAM}';")
    np_layout.addWidget(title_not)
    notif_frame = QFrame()
    notif_frame.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-bottom-left-radius:5px; border-bottom-right-radius:5px;')
    nf_layout = QVBoxLayout(notif_frame)
    nf_layout.setContentsMargins(8, 8, 8, 8)
    nf_layout.setSpacing(8)
    self.notif_table = QTableWidget()
    self.notif_table.setColumnCount(2)
    self.notif_table.setHorizontalHeaderLabels(['Hora', 'Mensaje'])
    hdr2 = self.notif_table.horizontalHeader()
    hdr2.setStyleSheet(f"\n            QHeaderView::section {{\n                background:{CLR_HEADER_BG};\n                color:{CLR_HEADER_TEXT};\n                padding:8px;\n                font:600 14px '{FONT_FAM}';\n                border:none;\n            }}\n        ")
    hdr2.setDefaultAlignment(Qt.AlignCenter)
    self.notif_table.verticalHeader().setVisible(False)
    self.notif_table.setEditTriggers(QTableWidget.NoEditTriggers)
    style_table(self.notif_table)
    self.notif_table.setColumnWidth(0, 120)
    self.notif_table.setColumnWidth(1, 420)
    make_shadow(notif_frame, 15, 6, 150)
    nf_layout.addWidget(self.notif_table)
    np_layout.addWidget(notif_frame, 1)
    self.more_stack.addWidget(notif_page)
    cam_page = QFrame()
    cam_page.setStyleSheet(f'background:{CLR_BG}; border-radius:5px;')
    cp = QVBoxLayout(cam_page)
    cp.setContentsMargins(16, 16, 16, 16)
    cp.setSpacing(8)
    back_cam = QPushButton()
    back_cam.setIcon(icon('Arrow.svg'))
    back_cam.setIconSize(QSize(24, 24))
    back_cam.setFixedSize(36, 36)
    back_cam.setStyleSheet('background:transparent; border:none;')
    back_cam.clicked.connect(self._back_from_more)
    cp.addWidget(back_cam, alignment=Qt.AlignLeft)
    title_cam = QLabel('Cámaras')
    title_cam.setStyleSheet(f"color:{CLR_TITLE}; font:700 22px '{FONT_FAM}';")
    cp.addWidget(title_cam)
    cam_frame = QFrame()
    cam_frame.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
    cf_layout = QVBoxLayout(cam_frame)
    cf_layout.setContentsMargins(8, 8, 8, 8)
    cf_layout.setSpacing(8)
    grid = QGridLayout()
    grid.setSpacing(16)
    for i in range(2):
        for j in range(2):
            frame = QFrame()
            frame.setFixedSize(300, 200)
            frame.setStyleSheet(f'\n                    QFrame {{ background:{CLR_HOVER}; border:2px solid {CLR_TITLE}; border-radius:5px; }}\n                ')
            lbl = QLabel('Vista cámara', frame)
            lbl.setStyleSheet(f"color:{CLR_TEXT_IDLE}; font:500 16px '{FONT_FAM}';")
            lbl.setAlignment(Qt.AlignCenter)
            vbox = QVBoxLayout(frame)
            vbox.addStretch(1)
            vbox.addWidget(lbl)
            vbox.addStretch(1)
            grid.addWidget(frame, i, j)
    cf_layout.addLayout(grid, 1)
    make_shadow(cam_frame, 15, 6, 150)
    cp.addWidget(cam_frame, 1)
    self.more_stack.addWidget(cam_page)
    health_page = QFrame()
    health_page.setStyleSheet(f'background:{CLR_BG}; border-radius:5px;')
    hp = QVBoxLayout(health_page)
    hp.setContentsMargins(16, 16, 16, 16)
    hp.setSpacing(12)
    back_h = QPushButton()
    back_h.setIcon(icon('Arrow.svg'))
    back_h.setIconSize(QSize(24, 24))
    back_h.setFixedSize(36, 36)
    back_h.setStyleSheet('background:transparent; border:none;')
    back_h.clicked.connect(self._back_from_more)
    hp.addWidget(back_h, alignment=Qt.AlignLeft)
    title_h = QLabel('Historial De Salud')
    title_h.setStyleSheet(f"color:{CLR_TITLE}; font:700 22px '{FONT_FAM}';")
    hp.addWidget(title_h)
    frame_h = QFrame()
    frame_h.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
    fh_layout = QVBoxLayout(frame_h)
    fh_layout.setContentsMargins(8, 8, 8, 8)
    fh_layout.setSpacing(8)
    self.table_health = QTableWidget()
    self.table_health.setColumnCount(6)
    self.table_health.setHorizontalHeaderLabels(['Fecha', 'PA', 'BPM', 'SpO₂', 'Temp', 'FR'])
    hdrh = self.table_health.horizontalHeader()
    hdrh.setStyleSheet(f"QHeaderView::section {{ background:{CLR_HEADER_BG}; color:{CLR_HEADER_TEXT}; padding:8px; font:600 14px '{FONT_FAM}'; border:none; }}")
    hdrh.setDefaultAlignment(Qt.AlignCenter)
    self.table_health.verticalHeader().setVisible(False)
    self.table_health.setEditTriggers(QTableWidget.NoEditTriggers)
    style_table(self.table_health)
    sb = CustomScrollBar(Qt.Vertical)
    sb.setStyleSheet('margin:2px; background:transparent;')
    self.table_health.setVerticalScrollBar(sb)
    self.table_health.setViewportMargins(0, 0, 4, 0)
    self.table_health.setColumnWidth(0, 160)
    fh_layout.addWidget(self.table_health)
    hp.addWidget(frame_h, 1)
    self.more_stack.addWidget(health_page)
    account_page = QFrame()
    account_page.setStyleSheet(f'background:{CLR_BG}; border-radius:5px;')
    ap = QVBoxLayout(account_page)
    ap.setContentsMargins(16, 16, 16, 16)
    ap.setSpacing(12)
    back_a = QPushButton()
    back_a.setIcon(icon('Arrow.svg'))
    back_a.setIconSize(QSize(24, 24))
    back_a.setFixedSize(36, 36)
    back_a.setStyleSheet('background:transparent; border:none;')
    back_a.clicked.connect(self._back_from_more)
    ap.addWidget(back_a, alignment=Qt.AlignLeft)
    title_a = QLabel('Información')
    title_a.setStyleSheet(f"color:{CLR_TITLE}; font:700 24px '{FONT_FAM}';")
    ap.addWidget(title_a)
    grid = QGridLayout()
    grid.setContentsMargins(0, 8, 0, 0)
    grid.setHorizontalSpacing(16)
    grid.setVerticalSpacing(16)
    summary_items = [('Dispositivos', 'acc_dev_label', 'cube.svg'), ('Listas', 'acc_list_label', 'clipboard-list.svg'), ('Notas', 'acc_note_label', 'note-sticky.svg'), ('Recordatorios', 'acc_rem_label', 'bell.svg'), ('Alarmas', 'acc_alarm_label', 'clock.svg'), ('Timers', 'acc_timer_label', 'stopwatch.svg'), ('Historial Salud', 'acc_health_label', 'file-medical.svg'), ('Acciones', 'acc_action_label', 'user.svg'), ('Tema', 'acc_theme_label', 'gear.svg'), ('Idioma', 'acc_lang_label', 'globe.svg'), ('Hora', 'acc_time_label', 'clock.svg'), ('Notificaciones', 'acc_notif_label', 'bell.svg')]
    cols = 3
    fa_solid_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'node_modules', '@fortawesome', 'fontawesome-free', 'svgs', 'solid')
    loc_icon_map = {'Dispositivos': 'house.svg', 'Listas': 'list.svg', 'Notas': 'note-sticky.svg', 'Recordatorios': 'calendar-days.svg', 'Alarmas': 'clock.svg', 'Timers': 'hourglass-half.svg', 'Historial Salud': 'file-medical.svg', 'Acciones': 'clock-rotate-left.svg', 'Tema': 'palette.svg', 'Idioma': 'language.svg', 'Hora': 'clock.svg', 'Notificaciones': 'bell.svg'}
    for idx, (title, attr_name, icon_name) in enumerate(summary_items):
        card = QFrame()
        card.setStyleSheet(f'background:{CLR_PANEL}; border:2px solid {CLR_TITLE}; border-radius:5px;')
        card.setFixedHeight(90)
        card.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        hl = QHBoxLayout(card)
        hl.setContentsMargins(8, 4, 8, 4)
        hl.setSpacing(8)
        lbl_icon = QLabel()
        pix = load_icon_pixmap(icon_name, QSize(24, 24))
        pix_tinted = tint_pixmap(pix, QColor(CLR_TITLE))
        lbl_icon.setPixmap(pix_tinted)
        hl.addWidget(lbl_icon)
        txt_layout = QVBoxLayout()
        txt_layout.setContentsMargins(0, 0, 0, 0)
        txt_layout.setSpacing(0)
        lbl_title = QLabel(title)
        lbl_title.setStyleSheet(f"color:{CLR_TITLE}; font:600 14px '{FONT_FAM}';")
        lbl_value = QLabel('--')
        lbl_value.setStyleSheet(f"color:{CLR_TEXT_IDLE}; font:700 15px '{FONT_FAM}';")
        lbl_value.setWordWrap(True)
        txt_layout.addWidget(lbl_title)
        txt_layout.addWidget(lbl_value)
        loc_lbl = QLabel()
        loc_lbl.setFixedSize(18, 18)
        loc_lbl.setScaledContents(True)
        icon_filename = loc_icon_map.get(title)
        loc_path = None
        if icon_filename is not None:
            potential_path = os.path.join(fa_solid_dir, icon_filename)
            if os.path.isfile(potential_path):
                loc_path = potential_path
        if loc_path:
            ico = QIcon(loc_path)
            pm = ico.pixmap(QSize(18, 18))
            pm_tinted = tint_pixmap(pm, QColor(CLR_TITLE))
            loc_lbl.setPixmap(pm_tinted)
        loc_lbl.setContentsMargins(0, 4, 0, 0)
        txt_layout.addWidget(loc_lbl)
        hl.addLayout(txt_layout)
        setattr(self, attr_name, lbl_value)
        loc_attr_name = attr_name.replace('_label', '_loc_label')
        setattr(self, loc_attr_name, loc_lbl)
        row = idx // cols
        col = idx % cols
        grid.addWidget(card, row, col)
    ap.addLayout(grid)
    ap.addSpacing(12)
    ap.addStretch(1)
    self.account_page = account_page
    self.more_stack.addWidget(account_page)
    layout.addWidget(self.more_stack)
    return w

def _make_config_page(self):
    w = QWidget()
    v = QVBoxLayout(w)
    v.setContentsMargins(0, 20, 0, 0)
    v.setSpacing(20)
    lbl_title = QLabel('Configuración')
    lbl_title.setStyleSheet(f"color:{CLR_TEXT_IDLE}; font:700 24px '{FONT_FAM}';")
    v.addWidget(lbl_title)
    themeF = QFrame()
    themeF.setFixedHeight(60)
    themeF.setStyleSheet(f'background:{CLR_PANEL}; border-radius:5px;')
    th = QHBoxLayout(themeF)
    th.setContentsMargins(16, 0, 16, 0)
    th.setSpacing(16)
    lbl_theme = QLabel('Tema:')
    lbl_theme.setStyleSheet(f"color:{CLR_TEXT_IDLE}; font:600 18px '{FONT_FAM}';")
    combo_theme = QComboBox()
    combo_theme.addItems(['Oscuro', 'Claro'])
    combo_theme.setStyleSheet(f"\n            QComboBox {{ background:{CLR_SURFACE}; color:{CLR_TEXT_IDLE};\n                          font:600 16px '{FONT_FAM}'; border:2px solid {CLR_TITLE};\n                          border-radius:5px; padding:4px 8px; }}\n            QComboBox::drop-down {{ border:none; }}\n            QComboBox QAbstractItemView {{ background:{CLR_PANEL};\n                          border:2px solid {CLR_TITLE};\n                          selection-background-color:{CLR_ITEM_ACT};\n                          color:{CLR_TEXT_IDLE}; outline:none;padding:4px; }}\n        ")
    combo_theme.currentIndexChanged.connect(lambda ix: self._set_theme('dark' if ix == 0 else 'light'))
    self.combo_theme = combo_theme
    th.addWidget(lbl_theme)
    th.addWidget(combo_theme)
    th.addStretch(1)
    v.addWidget(themeF)
    langF = QFrame()
    langF.setFixedHeight(60)
    langF.setStyleSheet(f'background:{CLR_PANEL}; border-radius:5px;')
    lh = QHBoxLayout(langF)
    lh.setContentsMargins(16, 0, 16, 0)
    lh.setSpacing(16)
    lbl_lang = QLabel('Idioma:')
    lbl_lang.setStyleSheet(f"color:{CLR_TEXT_IDLE}; font:600 18px '{FONT_FAM}';")
    combo_lang = QComboBox()
    combo_lang.addItems(['Español', 'Inglés'])
    combo_lang.setStyleSheet(combo_theme.styleSheet())
    combo_lang.currentIndexChanged.connect(lambda ix: self._change_language('es' if ix == 0 else 'en'))
    self.combo_lang = combo_lang
    lh.addWidget(lbl_lang)
    lh.addWidget(combo_lang)
    lh.addStretch(1)
    v.addWidget(langF)
    timeF = QFrame()
    timeF.setFixedHeight(60)
    timeF.setStyleSheet(f'background:{CLR_PANEL}; border-radius:5px;')
    tf = QHBoxLayout(timeF)
    tf.setContentsMargins(16, 0, 16, 0)
    tf.setSpacing(16)
    lbl_time = QLabel('Tiempo:')
    lbl_time.setStyleSheet(f"color:{CLR_TEXT_IDLE}; font:600 18px '{FONT_FAM}';")
    combo_time = QComboBox()
    combo_time.addItems(['24 hr', '12 hr'])
    combo_time.setStyleSheet(combo_theme.styleSheet())
    combo_time.currentIndexChanged.connect(lambda ix: self._set_time_format(ix == 0))
    self.combo_time = combo_time
    tf.addWidget(lbl_time)
    tf.addWidget(combo_time)
    tf.addStretch(1)
    v.addWidget(timeF)
    notifF = QFrame()
    notifF.setFixedHeight(60)
    notifF.setStyleSheet(f'background:{CLR_PANEL}; border-radius:5px;')
    nh = QHBoxLayout(notifF)
    nh.setContentsMargins(16, 0, 16, 0)
    nh.setSpacing(16)
    chk_notif = QPushButton('Notificaciones Emergentes')
    chk_notif.setCheckable(True)
    chk_notif.setChecked(True)
    chk_notif.setStyleSheet(f"\n            QPushButton {{ color:{CLR_TEXT_IDLE}; font:600 16px '{FONT_FAM}'; border:none; background:transparent; }}\n            QPushButton:checked {{ color:{CLR_TITLE}; }}\n        ")
    chk_notif.toggled.connect(self._toggle_notifications)
    self.chk_notif = chk_notif
    nh.addWidget(chk_notif)
    nh.addStretch(1)
    v.addWidget(notifF)
    aboutF = QFrame()
    aboutF.setFixedHeight(100)
    aboutF.setStyleSheet(f'background:{CLR_PANEL}; border-radius:5px;')
    ah = QVBoxLayout(aboutF)
    ah.setContentsMargins(16, 16, 16, 16)
    lbl_app = QLabel('TechHome v1.0')
    lbl_app.setStyleSheet(f"color:{CLR_TITLE}; font:700 18px '{FONT_FAM}';")
    lbl_desc = QLabel('Creado por el equipo VitalTech')
    lbl_desc.setStyleSheet(f"color:{CLR_TEXT_IDLE}; font:500 14px '{FONT_FAM}';")
    ah.addWidget(lbl_app)
    ah.addWidget(lbl_desc)
    v.addWidget(aboutF)
    v.addStretch(1)
    return w

def paintEvent(self, e):
    p = QPainter(self)
    p.setRenderHint(QPainter.Antialiasing)
    grad = QConicalGradient(QPointF(self.width() / 2, self.height() / 2), self._angle)
    if CURRENT_THEME == 'light':
        colors = [(0, QColor(255, 255, 255)), (0.25, QColor(224, 224, 224)), (0.5, QColor(255, 255, 255)), (0.75, QColor(224, 224, 224)), (1.0, QColor(255, 255, 255))]
    else:
        colors = [(0, QColor(7, 16, 27)), (0.25, QColor(20, 30, 60)), (0.5, QColor(7, 16, 27)), (0.75, QColor(20, 30, 60)), (1.0, QColor(7, 16, 27))]
    for pos, ccol in colors:
        grad.setColorAt(pos, ccol)
    p.fillRect(self.rect(), grad)

def _open_more_section(self, name, from_home=False):
    if hasattr(self, 'more_pages') and name in self.more_pages:
        if name == 'Notificaciones':
            self._populate_notif_table()
        elif name == 'Historial De Salud':
            self._populate_health_table()
        self.from_home_more = from_home
        self._switch_page(self.stack, 2)
        self._switch_page(self.more_stack, self.more_pages[name])
        if hasattr(self, 'username') and self.username:
            try:
                database.log_action(self.username, f'Sección abierta: {name}')
            except Exception:
                pass

def _back_from_more(self):
    if getattr(self, 'from_home_more', False):
        self._switch_page(self.stack, 0)
        self.from_home_more = False
    self._switch_page(self.more_stack, 0)
